package edu.colostate.cs414.d.pizza.ui.special;

import edu.colostate.cs414.d.pizza.Kiosk;
import edu.colostate.cs414.d.pizza.api.menu.DailySpecial;
import edu.colostate.cs414.d.pizza.api.menu.PizzaMenuItem;
import edu.colostate.cs414.d.pizza.ui.MenuItemTableModel;
import edu.colostate.cs414.d.pizza.ui.event.DailySpecialItemAddedEvent;
import edu.colostate.cs414.d.pizza.ui.menu.MenuFeature;
import edu.colostate.cs414.d.pizza.ui.menu.MenuPanel;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.timothyb89.eventbus.EventHandler;
import org.timothyb89.eventbus.EventScanMode;
import org.timothyb89.eventbus.EventScanType;

@EventScanMode(type = EventScanType.EXTENDED)
public class DailySpecialEditDialog extends JDialog {

    private DailySpecial originalSpecial;
    private DailySpecial returnedSpecial;
    
    /**
     * Creates new form DailySpecialAddDialog
     */
    public DailySpecialEditDialog(Frame parent, DailySpecial originalSpecial) {
        super(parent, true);
        
        this.originalSpecial = originalSpecial;
        
        initComponents();
        initMenu();
        initSpecial();
        
        setLocationRelativeTo(parent);
    }
    
    public DailySpecialEditDialog(Frame parent) {
        this(parent, null);
    }
    
    public DailySpecialEditDialog(Dialog parent, DailySpecial originalSpecial) {
        super(parent, true);
        
        this.originalSpecial = originalSpecial;
        
        initComponents();
        initMenu();
        initSpecial();
		
		itemTable.getSelectionModel().addListSelectionListener(selectionListener);
        
        setLocationRelativeTo(parent);
    }
    
    public DailySpecialEditDialog(Dialog parent) {
        this(parent, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuWrapper = new JPanel();
        propertiesPanel = new JPanel();
        itemTableScroll = new JScrollPane();
        itemTable = new JTable();
        saveButton = new JButton();
        cancelButton = new JButton();
        priceLabel = new JLabel();
        priceField = new JSpinner();
        removeButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        menuWrapper.setBorder(BorderFactory.createTitledBorder("Menu"));
        menuWrapper.setToolTipText("");
        menuWrapper.setLayout(new BorderLayout());

        propertiesPanel.setBorder(BorderFactory.createTitledBorder("Properties"));

        itemTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        itemTableScroll.setViewportView(itemTable);

        saveButton.setIcon(new ImageIcon(getClass().getResource("/edu/colostate/cs414/d/pizza/ui/add-small.png"))); // NOI18N
        saveButton.setText("Save Special");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new ImageIcon(getClass().getResource("/edu/colostate/cs414/d/pizza/ui/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        priceLabel.setText("Price:");

        priceField.setModel(new SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        GroupLayout propertiesPanelLayout = new GroupLayout(propertiesPanel);
        propertiesPanel.setLayout(propertiesPanelLayout);
        propertiesPanelLayout.setHorizontalGroup(
            propertiesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(itemTableScroll, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addComponent(saveButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton))
            .addGroup(GroupLayout.Alignment.TRAILING, propertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(priceLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(priceField)
                .addContainerGap())
            .addGroup(GroupLayout.Alignment.TRAILING, propertiesPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(removeButton))
        );
        propertiesPanelLayout.setVerticalGroup(
            propertiesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addComponent(itemTableScroll, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel)
                    .addComponent(priceField, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addGroup(propertiesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuWrapper, GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertiesPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(menuWrapper, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(propertiesPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int row = itemTable.getSelectedRow();
        if (row < 0) {
            error("No row selected!");
            return;
        }
        
        PizzaMenuItem item = tableModel.getItem(row);
        tableModel.removeItem(item);
        
        if (tableModel.getItems().isEmpty()) {
            removeButton.setEnabled(false);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        returnedSpecial = null;
        
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		double price = (double) priceField.getValue();
		
		if (price < 0) {
			error("Price must not be negative.");
			return;
		}
		
		if (tableModel.getItems().isEmpty()) {
			error("Specials must have at least one item.");
			return;
		}
        
		returnedSpecial = new DailySpecial(price, tableModel.getItems());
		dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void initMenu() {
        Kiosk kiosk = Kiosk.getInstance();
        
        MenuPanel panel = new MenuPanel(
                kiosk.viewMenu(),
                MenuFeature.ADMIN_SPECIAL);
        panel.bus().register(this);
        
        menuWrapper.add(panel, BorderLayout.CENTER);
    }
    
    private void initSpecial() {
        if (originalSpecial == null) {
            tableModel = new MenuItemTableModel();
        } else {
            tableModel = new MenuItemTableModel(originalSpecial.getItems());
            
            priceField.setValue(originalSpecial.getPrice());
        }
        
        itemTable.setModel(tableModel);
    }
    
    @EventHandler
    private void doDailySpecialItemAdded(DailySpecialItemAddedEvent event) {
        tableModel.addItem(event.getItem());
    }
    
	private final ListSelectionListener selectionListener = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            removeButton.setEnabled(true);
        }
        
    };
	
    private void error(String message) {
        JOptionPane.showMessageDialog(
                this, message, "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    public DailySpecial getOriginalSpecial() {
        return originalSpecial;
    }

    public DailySpecial getReturnedSpecial() {
        return returnedSpecial;
    }
    
    private MenuItemTableModel tableModel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JTable itemTable;
    private JScrollPane itemTableScroll;
    private JPanel menuWrapper;
    private JSpinner priceField;
    private JLabel priceLabel;
    private JPanel propertiesPanel;
    private JButton removeButton;
    private JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
