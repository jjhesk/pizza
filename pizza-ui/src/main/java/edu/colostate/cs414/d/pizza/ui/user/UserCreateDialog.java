package edu.colostate.cs414.d.pizza.ui.user;

import edu.colostate.cs414.d.pizza.Kiosk;
import edu.colostate.cs414.d.pizza.api.user.UserType;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

public class UserCreateDialog extends JDialog {

	/**
	 * Creates new form UserCreateDialog
	 */
	public UserCreateDialog(Dialog parent) {
		super(parent, true);
		
		initComponents();
		
		setLocationRelativeTo(parent);
	}
	
	public UserCreateDialog(Frame parent) {
		super(parent, true);
		
		initComponents();
		
		setLocationRelativeTo(parent);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeGroup = new ButtonGroup();
        userLabel = new JLabel();
        userField = new JTextField();
        passwordField = new JPasswordField();
        passwordLabel = new JLabel();
        confirmField = new JPasswordField();
        confirmLabel = new JLabel();
        typeLabel = new JLabel();
        typeManagerRadio = new JRadioButton();
        typeChefRadio = new JRadioButton();
        typeCashierRadio = new JRadioButton();
        cancelButton = new JButton();
        saveButton = new JButton();
        typeCustomerRadio = new JRadioButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create User");

        userLabel.setText("User Name:");

        passwordLabel.setText("Password:");

        confirmLabel.setText("Repeat:");

        typeLabel.setText("Type:");

        typeGroup.add(typeManagerRadio);
        typeManagerRadio.setText("Manager");

        typeGroup.add(typeChefRadio);
        typeChefRadio.setText("Chef");

        typeGroup.add(typeCashierRadio);
        typeCashierRadio.setText("Cashier");
        typeCashierRadio.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                typeCashierRadioActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new ImageIcon(getClass().getResource("/edu/colostate/cs414/d/pizza/ui/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new ImageIcon(getClass().getResource("/edu/colostate/cs414/d/pizza/ui/okay.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        typeGroup.add(typeCustomerRadio);
        typeCustomerRadio.setText("Customer");
        typeCustomerRadio.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                typeCustomerRadioActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(userLabel)
                    .addComponent(passwordLabel)
                    .addComponent(confirmLabel)
                    .addComponent(typeLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(userField)
                    .addComponent(passwordField)
                    .addComponent(confirmField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(typeCashierRadio)
                            .addComponent(typeCustomerRadio)
                            .addComponent(typeManagerRadio)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(typeChefRadio)
                                        .addGap(96, 96, 96))
                                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(saveButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(cancelButton)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(userField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeManagerRadio))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeChefRadio)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeCustomerRadio)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeCashierRadio)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String user     = userField.getText();
		String password = new String(passwordField.getPassword());
		String confirm  = new String(confirmField.getPassword());
		UserType type   = getUserType();
		
		if (user.isEmpty()) {
			error("Username must not be empty!");
			return;
		}
		
		if (password.isEmpty()) {
			error("Password must not be empty!");
			return;
		}
		
		if (!password.equals(confirm)) {
			error("Passwords do not match.");
			return;
		}
		
		if (type == null) {
			error("You must select a user type.");
			return;
		}
		
		if (!Kiosk.getInstance().addUser(user, password, type)) {
			error("A user with that name already exists.");
			return;
		}
		
		dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void typeCashierRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_typeCashierRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCashierRadioActionPerformed

    private void typeCustomerRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_typeCustomerRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCustomerRadioActionPerformed

	private UserType getUserType() {
		if (typeManagerRadio.isSelected()) {
			return UserType.MANAGER;
		} else if (typeChefRadio.isSelected()) {
			return UserType.CHEF;
		} else if (typeCashierRadio.isSelected()) {
			return UserType.CASHIER;
		} else if (typeCustomerRadio.isSelected()){
                        return UserType.CUSTOMER;
                }	
		return null;
	}
	
	private void error(String message) {
        JOptionPane.showMessageDialog(
                this, message, "Error",
                JOptionPane.ERROR_MESSAGE);
    }
	
	public void forceManager() {
		typeManagerRadio.setSelected(true);
		
		typeManagerRadio.setEnabled(false);
		typeChefRadio.setEnabled(false);
		typeCashierRadio.setEnabled(false);
                typeCustomerRadio.setEnabled(false);
                cancelButton.setEnabled(false);
	}
        
        public void forceCustomer() {
		typeCustomerRadio.setSelected(true);
		
		typeManagerRadio.setEnabled(false);
		typeChefRadio.setEnabled(false);
		typeCashierRadio.setEnabled(false);
                typeCustomerRadio.setEnabled(false);
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JPasswordField confirmField;
    private JLabel confirmLabel;
    private JPasswordField passwordField;
    private JLabel passwordLabel;
    private JButton saveButton;
    private JRadioButton typeCashierRadio;
    private JRadioButton typeChefRadio;
    private JRadioButton typeCustomerRadio;
    private ButtonGroup typeGroup;
    private JLabel typeLabel;
    private JRadioButton typeManagerRadio;
    private JTextField userField;
    private JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
